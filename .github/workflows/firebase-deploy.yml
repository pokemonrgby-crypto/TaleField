# .github/workflows/firebase-deploy.yml (수정된 결과)

name: Deploy to Firebase (Hosting + Functions)

on:
  push:
    branches: [ "main" ] # main 브랜치에 push될 때 실행됩니다.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # GitHub Secrets를 사용해 클라이언트용 Firebase 설정 파일을 동적으로 생성합니다.
      # 이 파일은 .gitignore에 추가하여 레포지토리에 커밋되지 않도록 하는 것이 좋습니다.
      - name: Create firebase-config.js from secrets
        run: |
          mkdir -p public
          cat > public/firebase-config.js <<EOF
          window.__FBCONFIG__ = {
            apiKey: "${{ secrets.FB_API_KEY }}",
            authDomain: "${{ secrets.FB_AUTH_DOMAIN }}",
            projectId: "${{ secrets.FB_PROJECT_ID }}",
            storageBucket: "${{ secrets.FB_STORAGE_BUCKET }}",
            messagingSenderId: "${{ secrets.FB_MESSAGING_SENDER_ID }}",
            appId: "${{ secrets.FB_APP_ID }}"
          };
          EOF

      # functions 폴더가 존재할 경우에만 의존성을 설치합니다.
      - name: Install Functions deps
        run: |
          if [ -d "functions" ]; then
            cd functions && npm install
          else
            echo "functions directory not found, skipping npm install."
          fi

      # Google Cloud에 인증합니다.
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Firebase에 배포합니다.
      - name: Deploy (Hosting + Functions)
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: firebase deploy --only hosting,functions --project "$FIREBASE_PROJECT_ID" --force
